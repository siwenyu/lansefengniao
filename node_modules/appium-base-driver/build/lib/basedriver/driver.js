'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _mjsonwp = require('../mjsonwp');

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _commands = require('./commands');

var _commands2 = _interopRequireDefault(_commands);

var _helpers = require('./helpers');

var _helpers2 = _interopRequireDefault(_helpers);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _desiredCaps = require('./desired-caps');

var _capabilities = require('./capabilities');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumSupport = require('appium-support');

var _automationNames = require('./automation-names');

var NEW_COMMAND_TIMEOUT_MS = 60 * 1000;

var EVENT_SESSION_INIT = 'newSessionRequested';
var EVENT_SESSION_START = 'newSessionStarted';
var EVENT_SESSION_QUIT_START = 'quitSessionRequested';
var EVENT_SESSION_QUIT_DONE = 'quitSessionFinished';

var BaseDriver = (function (_MobileJsonWireProtocol) {
  _inherits(BaseDriver, _MobileJsonWireProtocol);

  function BaseDriver() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var shouldValidateCaps = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

    _classCallCheck(this, BaseDriver);

    _get(Object.getPrototypeOf(BaseDriver.prototype), 'constructor', this).call(this);

    // setup state
    this.sessionId = null;
    this.opts = opts;
    this.caps = null;
    this.helpers = _helpers2['default'];

    // timeout initialization
    this.newCommandTimeoutMs = NEW_COMMAND_TIMEOUT_MS;
    this.implicitWaitMs = 0;

    this._constraints = _lodash2['default'].cloneDeep(_desiredCaps.desiredCapabilityConstraints);
    this.locatorStrategies = [];
    this.webLocatorStrategies = [];

    // use a custom tmp dir to avoid losing data and app when computer is
    // restarted
    this.opts.tmpDir = this.opts.tmpDir || process.env.APPIUM_TMP_DIR || _os2['default'].tmpdir();

    // base-driver internals
    this.curCommand = new _bluebird2['default'](function (r) {
      r();
    }); // see note in execute
    this.curCommandCancellable = new _bluebird2['default'](function (r) {
      r();
    }); // see note in execute
    this.shutdownUnexpectedly = false;
    this.noCommandTimer = null;
    this.shouldValidateCaps = shouldValidateCaps;
    // settings should be instantiated by implementing drivers
    this.settings = null;
    this.resetOnUnexpectedShutdown();

    // keeping track of initial opts
    this.initialOpts = _lodash2['default'].cloneDeep(this.opts);

    // allow subclasses to have internal drivers
    this.managedDrivers = [];

    // store event timings
    this._eventHistory = {
      commands: [] // commands get a special place
    };

    this.protocol = null;
  }

  /**
   * This property is used by AppiumDriver to store the data of the
   * specific driver sessions. This data can be later used to adjust
   * properties for driver instances running in parallel.
   * Override it in inherited driver classes if necessary.
   *
   * @return {object} Driver properties mapping
   */

  _createClass(BaseDriver, [{
    key: 'logEvent',

    /*
     * API method for driver developers to log timings for important events
     */
    value: function logEvent(eventName) {
      if (eventName === "commands") {
        throw new Error("Cannot log commands directly");
      }
      if (typeof eventName !== "string") {
        throw new Error('Invalid eventName ' + eventName);
      }
      if (!this._eventHistory[eventName]) {
        this._eventHistory[eventName] = [];
      }
      var ts = Date.now();
      var logTime = new Date(ts).toTimeString();
      this._eventHistory[eventName].push(ts);
      _logger2['default'].debug('Event \'' + eventName + '\' logged at ' + ts + ' (' + logTime + ')');
    }

    /*
     * Overridden in appium driver, but here so that individual drivers can be
     * tested with clients that poll
     */
  }, {
    key: 'getStatus',
    value: function getStatus() {
      return _regeneratorRuntime.async(function getStatus$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', {});

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /*
     * Initialize a new onUnexpectedShutdown promise, cancelling existing one.
     */
  }, {
    key: 'resetOnUnexpectedShutdown',
    value: function resetOnUnexpectedShutdown() {
      var _this = this;

      if (this.onUnexpectedShutdown && !this.onUnexpectedShutdown.isFulfilled()) {
        this.onUnexpectedShutdown.cancel();
      }
      this.onUnexpectedShutdown = new _bluebird2['default'](function (resolve, reject) {
        _this.unexpectedShutdownDeferred = { resolve: resolve, reject: reject };
      }).cancellable();
      // noop handler to avoid warning.
      this.onUnexpectedShutdown['catch'](function () {});
    }

    // we only want subclasses to ever extend the contraints
  }, {
    key: 'sessionExists',

    // method required by MJSONWP in order to determine whether it should
    // respond with an invalid session response
    value: function sessionExists(sessionId) {
      if (!sessionId) return false; // eslint-disable-line curly
      return sessionId === this.sessionId;
    }

    // method required by MJSONWP in order to determine if the command should
    // be proxied directly to the driver
  }, {
    key: 'driverForSession',
    value: function driverForSession() /*sessionId*/{
      return this;
    }
  }, {
    key: 'logExtraCaps',
    value: function logExtraCaps(caps) {
      var extraCaps = _lodash2['default'].difference(_lodash2['default'].keys(caps), _lodash2['default'].keys(this._constraints));
      if (extraCaps.length) {
        _logger2['default'].warn('The following capabilities were provided, but are not ' + ('recognized by appium: ' + extraCaps.join(', ') + '.'));
      }
    }
  }, {
    key: 'validateDesiredCaps',
    value: function validateDesiredCaps(caps) {
      if (!this.shouldValidateCaps) {
        return true;
      }

      try {
        (0, _capabilities.validateCaps)(caps, this._constraints);
      } catch (e) {
        _logger2['default'].errorAndThrow(new _mjsonwp.errors.SessionNotCreatedError('The desiredCapabilities object was not valid for the ' + ('following reason(s): ' + e.message)));
      }

      this.logExtraCaps(caps);

      return true;
    }
  }, {
    key: 'executeCommand',

    // This is the main command handler for the driver. It wraps command
    // execution with timeout logic, checking that we have a valid session,
    // and ensuring that we execute commands one at a time. This method is called
    // by MJSONWP's express router.
    value: function executeCommand(cmd) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var startTime, res, nextCommand, endTime;
      return _regeneratorRuntime.async(function executeCommand$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            startTime = Date.now();

            if (cmd === 'createSession') {
              // If creating a session determine if W3C or MJSONWP protocol was requested and remember the choice
              this.protocol = BaseDriver.determineProtocol.apply(BaseDriver, args);
              this.logEvent(EVENT_SESSION_INIT);
            } else if (cmd === 'deleteSession') {
              this.logEvent(EVENT_SESSION_QUIT_START);
            }

            // if we had a command timer running, clear it now that we're starting
            // a new command and so don't want to time out
            this.clearNewCommandTimeout();

            // if we don't have this command, it must not be implemented

            if (this[cmd]) {
              context$2$0.next = 5;
              break;
            }

            throw new _mjsonwp.errors.NotYetImplementedError();

          case 5:
            res = undefined;

            if (!this.isCommandsQueueEnabled) {
              context$2$0.next = 14;
              break;
            }

            nextCommand = this.curCommand.then(function () {
              // eslint-disable-line promise/prefer-await-to-then
              // if we unexpectedly shut down, we need to reject every command in
              // the queue before we actually try to run it
              if (_this2.shutdownUnexpectedly) {
                return _bluebird2['default'].reject(new _mjsonwp.errors.NoSuchDriverError('The driver was unexpectedly shut down!'));
              }
              // We also need to turn the command into a cancellable promise so if we
              // have an unexpected shutdown event, for example, we can cancel it from
              // outside, rejecting the current command immediately
              _this2.curCommandCancellable = new _bluebird2['default'](function (r) {
                r();
              }).then(function () {
                // eslint-disable-line promise/prefer-await-to-then
                return _this2[cmd].apply(_this2, args);
              }).cancellable();
              return _this2.curCommandCancellable;
            });

            this.curCommand = nextCommand['catch'](function () {});
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap(nextCommand);

          case 11:
            res = context$2$0.sent;
            context$2$0.next = 19;
            break;

          case 14:
            if (!this.shutdownUnexpectedly) {
              context$2$0.next = 16;
              break;
            }

            throw new _mjsonwp.errors.NoSuchDriverError('The driver was unexpectedly shut down!');

          case 16:
            context$2$0.next = 18;
            return _regeneratorRuntime.awrap(this[cmd].apply(this, args));

          case 18:
            res = context$2$0.sent;

          case 19:

            // if we have set a new command timeout (which is the default), start a
            // timer once we've finished executing this command. If we don't clear
            // the timer (which is done when a new command comes in), we will trigger
            // automatic session deletion in this.onCommandTimeout. Of course we don't
            // want to trigger the timer when the user is shutting down the session
            // intentionally
            if (cmd !== 'deleteSession') {
              // reseting existing timeout
              this.startNewCommandTimeout();
            }

            // log timing information about this command
            endTime = Date.now();

            this._eventHistory.commands.push({ cmd: cmd, startTime: startTime, endTime: endTime });
            if (cmd === 'createSession') {
              this.logEvent(EVENT_SESSION_START);
            } else if (cmd === 'deleteSession') {
              this.logEvent(EVENT_SESSION_QUIT_DONE);
            }

            return context$2$0.abrupt('return', res);

          case 24:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startUnexpectedShutdown',
    value: function startUnexpectedShutdown() {
      var err = arguments.length <= 0 || arguments[0] === undefined ? new _mjsonwp.errors.NoSuchDriverError('The driver was unexpectedly shut down!') : arguments[0];
      return _regeneratorRuntime.async(function startUnexpectedShutdown$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.unexpectedShutdownDeferred.reject(err); // allow others to listen for this
            this.shutdownUnexpectedly = true;
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.deleteSession(this.sessionId));

          case 4:
            this.shutdownUnexpectedly = false;
            this.curCommandCancellable.cancel(err);

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'validateLocatorStrategy',
    value: function validateLocatorStrategy(strategy) {
      var webContext = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

      var validStrategies = this.locatorStrategies;
      _logger2['default'].debug('Valid locator strategies for this request: ' + validStrategies.join(', '));

      if (webContext) {
        validStrategies = validStrategies.concat(this.webLocatorStrategies);
      }

      if (!_lodash2['default'].includes(validStrategies, strategy)) {
        throw new _mjsonwp.errors.InvalidSelectorError('Locator Strategy \'' + strategy + '\' is not supported for this session');
      }
    }

    /*
     * Restart the session with the original caps,
     * preserving the timeout config.
     */
  }, {
    key: 'reset',
    value: function reset() {
      var currentConfig, _arr, _i, property, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, key, value;

      return _regeneratorRuntime.async(function reset$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Resetting app mid-session');
            _logger2['default'].debug('Running generic full reset');

            // preserving state
            currentConfig = {};
            _arr = ['implicitWaitMs', 'newCommandTimeoutMs', 'sessionId', 'resetOnUnexpectedShutdown'];

            for (_i = 0; _i < _arr.length; _i++) {
              property = _arr[_i];

              currentConfig[property] = this[property];
            }

            // We also need to preserve the unexpected shutdown, and make sure it is not cancelled during reset.
            this.resetOnUnexpectedShutdown = function () {};

            context$2$0.prev = 6;
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(this.deleteSession(this.sessionId));

          case 9:
            _logger2['default'].debug('Restarting app');
            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(this.createSession(this.caps));

          case 12:
            context$2$0.prev = 12;
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            context$2$0.prev = 16;

            // always restore state.
            for (_iterator = _getIterator(_lodash2['default'].toPairs(currentConfig)); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              _step$value = _slicedToArray(_step.value, 2);
              key = _step$value[0];
              value = _step$value[1];

              this[key] = value;
            }
            context$2$0.next = 24;
            break;

          case 20:
            context$2$0.prev = 20;
            context$2$0.t0 = context$2$0['catch'](16);
            _didIteratorError = true;
            _iteratorError = context$2$0.t0;

          case 24:
            context$2$0.prev = 24;
            context$2$0.prev = 25;

            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }

          case 27:
            context$2$0.prev = 27;

            if (!_didIteratorError) {
              context$2$0.next = 30;
              break;
            }

            throw _iteratorError;

          case 30:
            return context$2$0.finish(27);

          case 31:
            return context$2$0.finish(24);

          case 32:
            return context$2$0.finish(12);

          case 33:
            this.clearNewCommandTimeout();

          case 34:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[6,, 12, 33], [16, 20, 24, 32], [25,, 27, 31]]);
    }
  }, {
    key: 'getSwipeOptions',
    value: function getSwipeOptions(gestures) {
      var touchCount = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];
      var startX, startY, endX, endY, duration, element, destElement, locResult, sizeResult, offsetX, offsetY, firstElLocation;
      return _regeneratorRuntime.async(function getSwipeOptions$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            startX = this.helpers.getCoordDefault(gestures[0].options.x), startY = this.helpers.getCoordDefault(gestures[0].options.y), endX = this.helpers.getCoordDefault(gestures[2].options.x), endY = this.helpers.getCoordDefault(gestures[2].options.y), duration = this.helpers.getSwipeTouchDuration(gestures[1]), element = gestures[0].options.element, destElement = gestures[2].options.element || gestures[0].options.element;

            if (!_appiumSupport.util.hasValue(destElement)) {
              context$2$0.next = 18;
              break;
            }

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.getLocationInView(destElement));

          case 4:
            locResult = context$2$0.sent;
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.getSize(destElement));

          case 7:
            sizeResult = context$2$0.sent;
            offsetX = Math.abs(endX) < 1 && Math.abs(endX) > 0 ? sizeResult.width * endX : endX;
            offsetY = Math.abs(endY) < 1 && Math.abs(endY) > 0 ? sizeResult.height * endY : endY;

            endX = locResult.x + offsetX;
            endY = locResult.y + offsetY;
            // if the target element was provided, the coordinates for the destination need to be relative to it.

            if (!_appiumSupport.util.hasValue(element)) {
              context$2$0.next = 18;
              break;
            }

            context$2$0.next = 15;
            return _regeneratorRuntime.awrap(this.getLocationInView(element));

          case 15:
            firstElLocation = context$2$0.sent;

            endX -= firstElLocation.x;
            endY -= firstElLocation.y;

          case 18:
            return context$2$0.abrupt('return', { startX:
              // clients are responsible to use these options correctly
              startX, startY: startY, endX: endX, endY: endY, duration: duration, touchCount: touchCount, element: element });

          case 19:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'proxyActive',
    value: function proxyActive() /* sessionId */{
      return false;
    }
  }, {
    key: 'getProxyAvoidList',
    value: function getProxyAvoidList() /* sessionId */{
      return [];
    }
  }, {
    key: 'canProxy',
    value: function canProxy() /* sessionId */{
      return false;
    }
  }, {
    key: 'addManagedDriver',
    value: function addManagedDriver(driver) {
      this.managedDrivers.push(driver);
    }
  }, {
    key: 'getManagedDrivers',
    value: function getManagedDrivers() {
      return this.managedDrivers;
    }
  }, {
    key: 'driverData',
    get: function get() {
      return {};
    }

    /**
     * This property controls the way {#executeCommand} method
     * handles new driver commands received from the client.
     * Override it for inherited classes only in special cases.
     *
     * @return {boolean} If the returned value is true (default) then all the commands
     *   received by the particular driver instance are going to be put into the queue,
     *   so each following command will not be executed until the previous command
     *   execution is completed. False value disables that queue, so each driver command
     *   is executed independently and does not wait for anything.
     */
  }, {
    key: 'isCommandsQueueEnabled',
    get: function get() {
      return true;
    }

    /*
     * make eventHistory a property and return a cloned object so a consumer can't
     * inadvertently change data outside of logEvent
     */
  }, {
    key: 'eventHistory',
    get: function get() {
      return _lodash2['default'].cloneDeep(this._eventHistory);
    }
  }, {
    key: 'desiredCapConstraints',
    set: function set(constraints) {
      this._constraints = _Object$assign(this._constraints, constraints);
    },
    get: function get() {
      return this._constraints;
    }
  }, {
    key: 'validAutomations',
    get: function get() {
      return _automationNames.automationNames;
    }
  }], [{
    key: 'determineProtocol',

    /**
     * Test createSession inputs to see if this is a W3C Session or a MJSONWP Session
     */
    value: function determineProtocol(desiredCapabilities, requiredCapabilities, capabilities) {
      return _lodash2['default'].isPlainObject(capabilities) ? BaseDriver.DRIVER_PROTOCOL.W3C : BaseDriver.DRIVER_PROTOCOL.MJSONWP;
    }
  }, {
    key: 'DRIVER_PROTOCOL',
    value: {
      W3C: 'W3C',
      MJSONWP: 'MJSONWP'
    },
    enumerable: true
  }]);

  return BaseDriver;
})(_mjsonwp.MobileJsonWireProtocol);

var _iteratorNormalCompletion2 = true;
var _didIteratorError2 = false;
var _iteratorError2 = undefined;

try {

  for (var _iterator2 = _getIterator(_lodash2['default'].toPairs(_commands2['default'])), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
    var _step2$value = _slicedToArray(_step2.value, 2);

    var cmd = _step2$value[0];
    var fn = _step2$value[1];

    BaseDriver.prototype[cmd] = fn;
  }
} catch (err) {
  _didIteratorError2 = true;
  _iteratorError2 = err;
} finally {
  try {
    if (!_iteratorNormalCompletion2 && _iterator2['return']) {
      _iterator2['return']();
    }
  } finally {
    if (_didIteratorError2) {
      throw _iteratorError2;
    }
  }
}

exports['default'] = BaseDriver;
module.exports = exports['default'];

// get start time for this command, and log in special cases

// What we're doing here is pretty clever. this.curCommand is always
// a promise representing the command currently being executed by the
// driver, or the last command executed by the driver (it starts off as
// essentially a pre-resolved promise). When a command comes in, we tack it
// to the end of this.curCommand, essentially saying we want to execute it
// whenever this.curCommand is done. We call this new promise nextCommand,
// and its resolution is what we ultimately will return to whomever called
// us. Meanwhile, we reset this.curCommand to _be_ nextCommand (but
// ignoring any rejections), so that if another command comes into the
// server, it gets tacked on to the end of nextCommand. Thus we create
// a chain of promises that acts as a queue with single concurrency.

// there's no destination element handling in bootstrap and since it applies to all platforms, we handle it here
//# sourceMappingURL=data:application/json;charset=utf8;base64,
