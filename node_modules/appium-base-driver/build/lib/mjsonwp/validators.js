'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumSupport = require('appium-support');

var _basedriverDriver = require("../basedriver/driver");

var _basedriverDriver2 = _interopRequireDefault(_basedriverDriver);

function isNumber(o) {
  return _lodash2['default'].isNumber(o) || !_lodash2['default'].isNaN(parseInt(o, 10)) || !_lodash2['default'].isNaN(parseFloat(o));
}

function msValidator(ms) {
  if (!_lodash2['default'].isNumber(ms) || ms < 0) {
    throw new Error('Wait ms must be a number equal to 0 or greater');
  }
}

var validators = {
  setUrl: function setUrl(url) {
    // either an `xyz://`, `about:`, or `data:` scheme is allowed
    if (!url || !url.match(/^([a-zA-Z0-9_+.-]+:\/\/)|(about:)|(data:)/)) {
      throw new Error('Url or Uri must start with <scheme>://');
    }
  },
  implicitWait: function implicitWait(ms) {
    msValidator(ms);
  },
  asyncScriptTimeout: function asyncScriptTimeout(ms) {
    msValidator(ms);
  },
  timeouts: function timeouts(timeoutsObj) {
    if (timeoutsObj.protocol === _basedriverDriver2['default'].DRIVER_PROTOCOL.W3C) {
      var script = timeoutsObj.script;
      var pageLoad = timeoutsObj.pageLoad;
      var implicit = timeoutsObj.implicit;

      if (_appiumSupport.util.hasValue(script)) {
        msValidator(script);
      }
      if (_appiumSupport.util.hasValue(pageLoad)) {
        msValidator(pageLoad);
      }
      if (_appiumSupport.util.hasValue(implicit)) {
        msValidator(implicit);
      }
    } else {
      var type = timeoutsObj.type;
      var ms = timeoutsObj.ms;

      msValidator(ms);
      if (!_lodash2['default'].includes(['script', 'implicit', 'page load', 'command'], type)) {
        throw new Error('\'' + type + '\' is not a valid timeout type');
      }
    }
  },
  clickCurrent: function clickCurrent(button) {
    if (!(isNumber(button) || _lodash2['default'].isUndefined(button)) || button < 0 || button > 2) {
      throw new Error('Click button must be 0, 1, or 2');
    }
  },
  setNetworkConnection: function setNetworkConnection(type) {
    if (!isNumber(type) || [0, 1, 2, 4, 6].indexOf(type) === -1) {
      throw new Error('Network type must be one of 0, 1, 2, 4, 6');
    }
  }
};

exports.validators = validators;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9tanNvbndwL3ZhbGlkYXRvcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7c0JBQWMsUUFBUTs7Ozs2QkFDRCxnQkFBZ0I7O2dDQUNkLHNCQUFzQjs7OztBQUU3QyxTQUFTLFFBQVEsQ0FBRSxDQUFDLEVBQUU7QUFDcEIsU0FBTyxvQkFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQzlFOztBQUVELFNBQVMsV0FBVyxDQUFFLEVBQUUsRUFBRTtBQUN4QixNQUFJLENBQUMsb0JBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUU7QUFDN0IsVUFBTSxJQUFJLEtBQUssQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO0dBQ25FO0NBQ0Y7O0FBRUQsSUFBTSxVQUFVLEdBQUc7QUFDakIsUUFBTSxFQUFFLGdCQUFDLEdBQUcsRUFBSzs7QUFFZixRQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQywyQ0FBMkMsQ0FBQyxFQUFFO0FBQ25FLFlBQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLENBQUMsQ0FBQztLQUMzRDtHQUNGO0FBQ0QsY0FBWSxFQUFFLHNCQUFDLEVBQUUsRUFBSztBQUNwQixlQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7R0FDakI7QUFDRCxvQkFBa0IsRUFBRSw0QkFBQyxFQUFFLEVBQUs7QUFDMUIsZUFBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0dBQ2pCO0FBQ0QsVUFBUSxFQUFFLGtCQUFDLFdBQVcsRUFBSztBQUN6QixRQUFJLFdBQVcsQ0FBQyxRQUFRLEtBQUssOEJBQVcsZUFBZSxDQUFDLEdBQUcsRUFBRTtVQUNwRCxNQUFNLEdBQXdCLFdBQVcsQ0FBekMsTUFBTTtVQUFFLFFBQVEsR0FBYyxXQUFXLENBQWpDLFFBQVE7VUFBRSxRQUFRLEdBQUksV0FBVyxDQUF2QixRQUFROztBQUVqQyxVQUFJLG9CQUFLLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUN6QixtQkFBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO09BQ3JCO0FBQ0QsVUFBSSxvQkFBSyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDM0IsbUJBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztPQUN2QjtBQUNELFVBQUksb0JBQUssUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFO0FBQzNCLG1CQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7T0FDdkI7S0FDRixNQUFNO1VBQ0UsSUFBSSxHQUFRLFdBQVcsQ0FBdkIsSUFBSTtVQUFFLEVBQUUsR0FBSSxXQUFXLENBQWpCLEVBQUU7O0FBRWYsaUJBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNoQixVQUFJLENBQUMsb0JBQUUsUUFBUSxDQUFDLENBQUMsUUFBUSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsU0FBUyxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUU7QUFDckUsY0FBTSxJQUFJLEtBQUssUUFBSyxJQUFJLG9DQUFnQyxDQUFDO09BQzFEO0tBQ0Y7R0FDRjtBQUNELGNBQVksRUFBRSxzQkFBQyxNQUFNLEVBQUs7QUFDeEIsUUFBSSxFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxvQkFBRSxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUEsQUFBQyxJQUFLLE1BQU0sR0FBRyxDQUFDLElBQUksTUFBTSxHQUFHLENBQUMsQUFBQyxFQUFFO0FBQzlFLFlBQU0sSUFBSSxLQUFLLENBQUMsaUNBQWlDLENBQUMsQ0FBQztLQUNwRDtHQUNGO0FBQ0Qsc0JBQW9CLEVBQUUsOEJBQUMsSUFBSSxFQUFLO0FBQzlCLFFBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO0FBQzNELFlBQU0sSUFBSSxLQUFLLENBQUMsMkNBQTJDLENBQUMsQ0FBQztLQUM5RDtHQUNGO0NBQ0YsQ0FBQzs7UUFFTyxVQUFVLEdBQVYsVUFBVSIsImZpbGUiOiJsaWIvbWpzb253cC92YWxpZGF0b3JzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IHV0aWwgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgQmFzZURyaXZlciBmcm9tIFwiLi4vYmFzZWRyaXZlci9kcml2ZXJcIjtcblxuZnVuY3Rpb24gaXNOdW1iZXIgKG8pIHtcbiAgcmV0dXJuIF8uaXNOdW1iZXIobykgfHwgIV8uaXNOYU4ocGFyc2VJbnQobywgMTApKSB8fCAhXy5pc05hTihwYXJzZUZsb2F0KG8pKTtcbn1cblxuZnVuY3Rpb24gbXNWYWxpZGF0b3IgKG1zKSB7XG4gIGlmICghXy5pc051bWJlcihtcykgfHwgbXMgPCAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdXYWl0IG1zIG11c3QgYmUgYSBudW1iZXIgZXF1YWwgdG8gMCBvciBncmVhdGVyJyk7XG4gIH1cbn1cblxuY29uc3QgdmFsaWRhdG9ycyA9IHtcbiAgc2V0VXJsOiAodXJsKSA9PiB7XG4gICAgLy8gZWl0aGVyIGFuIGB4eXo6Ly9gLCBgYWJvdXQ6YCwgb3IgYGRhdGE6YCBzY2hlbWUgaXMgYWxsb3dlZFxuICAgIGlmICghdXJsIHx8ICF1cmwubWF0Y2goL14oW2EtekEtWjAtOV8rLi1dKzpcXC9cXC8pfChhYm91dDopfChkYXRhOikvKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVcmwgb3IgVXJpIG11c3Qgc3RhcnQgd2l0aCA8c2NoZW1lPjovLycpO1xuICAgIH1cbiAgfSxcbiAgaW1wbGljaXRXYWl0OiAobXMpID0+IHtcbiAgICBtc1ZhbGlkYXRvcihtcyk7XG4gIH0sXG4gIGFzeW5jU2NyaXB0VGltZW91dDogKG1zKSA9PiB7XG4gICAgbXNWYWxpZGF0b3IobXMpO1xuICB9LFxuICB0aW1lb3V0czogKHRpbWVvdXRzT2JqKSA9PiB7XG4gICAgaWYgKHRpbWVvdXRzT2JqLnByb3RvY29sID09PSBCYXNlRHJpdmVyLkRSSVZFUl9QUk9UT0NPTC5XM0MpIHtcbiAgICAgIGNvbnN0IHtzY3JpcHQsIHBhZ2VMb2FkLCBpbXBsaWNpdH0gPSB0aW1lb3V0c09iajtcblxuICAgICAgaWYgKHV0aWwuaGFzVmFsdWUoc2NyaXB0KSkge1xuICAgICAgICBtc1ZhbGlkYXRvcihzY3JpcHQpO1xuICAgICAgfVxuICAgICAgaWYgKHV0aWwuaGFzVmFsdWUocGFnZUxvYWQpKSB7XG4gICAgICAgIG1zVmFsaWRhdG9yKHBhZ2VMb2FkKTtcbiAgICAgIH1cbiAgICAgIGlmICh1dGlsLmhhc1ZhbHVlKGltcGxpY2l0KSkge1xuICAgICAgICBtc1ZhbGlkYXRvcihpbXBsaWNpdCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHt0eXBlLCBtc30gPSB0aW1lb3V0c09iajtcblxuICAgICAgbXNWYWxpZGF0b3IobXMpO1xuICAgICAgaWYgKCFfLmluY2x1ZGVzKFsnc2NyaXB0JywgJ2ltcGxpY2l0JywgJ3BhZ2UgbG9hZCcsICdjb21tYW5kJ10sIHR5cGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJyR7dHlwZX0nIGlzIG5vdCBhIHZhbGlkIHRpbWVvdXQgdHlwZWApO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgY2xpY2tDdXJyZW50OiAoYnV0dG9uKSA9PiB7XG4gICAgaWYgKCEoaXNOdW1iZXIoYnV0dG9uKSB8fCBfLmlzVW5kZWZpbmVkKGJ1dHRvbikpIHx8IChidXR0b24gPCAwIHx8IGJ1dHRvbiA+IDIpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NsaWNrIGJ1dHRvbiBtdXN0IGJlIDAsIDEsIG9yIDInKTtcbiAgICB9XG4gIH0sXG4gIHNldE5ldHdvcmtDb25uZWN0aW9uOiAodHlwZSkgPT4ge1xuICAgIGlmICghaXNOdW1iZXIodHlwZSkgfHwgWzAsIDEsIDIsIDQsIDZdLmluZGV4T2YodHlwZSkgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05ldHdvcmsgdHlwZSBtdXN0IGJlIG9uZSBvZiAwLCAxLCAyLCA0LCA2Jyk7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgeyB2YWxpZGF0b3JzIH07XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
